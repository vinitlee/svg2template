// Generated by CoffeeScript 1.8.0
(function() {
  var listenForGesture, threshold;

  this.socket = io('http://localhost:3000');

  socket.on('ports', function(data) {
    return console.log(data);
  });

  socket.on('status', function(data) {
    console.log(data);
    if (data.ready) {
      return console.log('Ready to transmit');
    }
  });

  socket.on('serial', function(data) {
    $('.serial').empty();
    return data.ports.forEach(function(port) {
      console.log(port.comName);
      if (port.comName.search('Bluetooth') < 0) {
        return $('.serial').append($('<button>', {
          "class": 'port'
        }).html(port.comName).click((function() {
          $(this).addClass('selected');
          console.log({
            port: $(this).html(),
            baud: 9600
          });
          return socket.emit('serial', {
            port: $(this).html(),
            baud: 9600
          });
        })));
      }
    });
  });

  threshold = 500;

  socket.on('readings', function(data) {
    console.log(data.d);
    if (data.d[0] < threshold * 2) {
      if (data.d[1] > threshold && data.d[1] > data.d[2]) {
        return answer('no');
      } else if (data.d[2] > threshold && data.d[2] > data.d[1]) {
        return answer('yes');
      }
    }
  });

  this.answer = function(ans) {
    clearTimeout(window.resetCard);
    $('.question').removeClass('yes').removeClass('no').addClass(ans);
    return window.resetCard = setTimeout(answer, 1000);
  };

  this.speech = 0;

  this.sayCalls = {};

  this.sayListen = function(text) {
    return say(text, function() {
      return listenForGesture(2000);
    });
  };

  this.say = function(text, callback) {
    var r;
    if (callback == null) {
      callback = function() {
        return null;
      };
    }
    speech.ended = false;
    r = Math.floor(Math.random() * 100);
    window.sayCalls[r] = callback;
    return socket.emit('tts', {
      text: text,
      callback: r
    });
  };

  socket.on('tts', function(data) {
    var speech;
    speech = new Audio('data:audio/mp3;base64,' + data.audio);
    window.speech = speech;
    $(speech).bind('ended', function() {
      return sayCalls[data.callback]();
    });
    return speech.play();
  });

  listenForGesture = function(ms) {
    var ding, responseWindow;
    ding = new Audio('audio/ping1.wav');
    ding.play();
    return responseWindow = setTimeout(function() {
      return console.log('Theoretically, compute something!');
    }, ms);
  };

}).call(this);
